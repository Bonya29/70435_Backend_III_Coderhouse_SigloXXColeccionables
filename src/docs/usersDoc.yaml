components:
  schemas:
    User:
      type: object
      properties:
        first_name:
          type: string
          description: Nombre del usuario
        last_name:
          type: string
          description: Apellido del usuario
        full_name:
          type: string
          description: Nombre completo generado automáticamente
        gender:
          type: string
          enum: [N/A, Masculino, Femenino]
          description: Género del usuario
        email:
          type: string
          description: Correo electrónico único del usuario
        age:
          type: number
          description: Edad del usuario (mayor a 13 años)
        password:
          type: string
          description: Contraseña del usuario (almacenada en hash)
        cartId:
          type: string
          description: ID del carrito asociado
        role:
          type: string
          enum: [user, admin]
          description: Rol del usuario
      example:
        first_name: Juan
        last_name: Pérez
        full_name: Juan Pérez
        gender: Masculino
        email: juanperez@email.com
        age: 25
        password: qwer12
        cartId: 60f7a4b29b1d8a0015fd2f12
        role: user

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sigloXXColeccionablesToken

paths:
  /api/users:
    get:
      summary: Obtener todos los usuarios registrados
      tags: [Users]
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '500':
          description: Error interno del servidor

  /api/users/register:
    post:
      summary: Registrar un nuevo usuario
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Usuario registrado exitosamente
        '400':
          description: Campos incompletos, email inválido o edad insuficiente
        '500':
          description: Error interno del servidor

  /api/users/login:
    post:
      summary: Iniciar sesión de un usuario
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
              example:
                email: juanperez@email.com
                password: qwer12
      responses:
        '200':
          description: Login exitoso y generación de cookie JWT
        '400':
          description: Usuario no encontrado o contraseña incorrecta
        '500':
          description: Error interno del servidor

  /api/users/logout:
    post:
      summary: Cerrar sesión del usuario actual
      tags: [Users]
      responses:
        '200':
          description: Logout exitoso (cookie eliminada)
        '500':
          description: Error interno del servidor

  /api/users/deleteAccount/{id}:
    delete:
      summary: Eliminar cuenta de un usuario y su carrito
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cuenta eliminada exitosamente
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor

  /api/users/current:
    get:
      summary: Obtener información del usuario autenticado actual
      tags: [Users]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Información del usuario
        '401':
          description: No autorizado (token inválido o ausente)

  /api/users/{id}:
    get:
      summary: Obtener un usuario por ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuario encontrado
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor